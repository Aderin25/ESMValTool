"""
Call like:
python util/nml-utils/generateNML/generateNML.py --project PROJECT --name NAME --product PRODUCT --institute INSTITUTE --model MODEL --experiment EXPERIMENT --mip MIP --ensemble ENSEMBLE --grid GRID --start_year START_YEAR --end_year END_YEAR --variable VARIABLE

"""
import argparse
import os

from jinja2 import Template

import xmltodict

t_nml = """
<namelist>
<include href="./config_private.xml" />
<namelist_summary>
###############################################################################
namelist_cmip6_routine_evaluation.xml

Description
Autogenerated namelist for routine evaluation of CMIP6 data

Author
Core Team

Project
CMIP6-DICAD

Reference

This namelist is part of the ESMValTool
###############################################################################
</namelist_summary>

<GLOBAL>
    <write_plots type="boolean">           True         </write_plots>
    <write_netcdf type="boolean">          True         </write_netcdf>
    <force_processing type="boolean">     False         </force_processing>
    <wrk_dir type="path">                  @{WORKPATH}  </wrk_dir>
    <plot_dir type="path">                 @{PLOTPATH}/ </plot_dir>
    <climo_dir type="path">                @{CLIMOPATH} </climo_dir>
    <write_plot_vars type="boolean">       True         </write_plot_vars>
    <max_data_filesize type="integer">      100         </max_data_filesize>
    <max_data_blocksize type="integer">     500         </max_data_blocksize>
    <verbosity type="integer">               1          </verbosity>
    <exit_on_warning type="boolean">      True          </exit_on_warning>
    <output_file_type>                      png         </output_file_type>
    <tags>                                P_cmip6       </tags>
</GLOBAL>

<MODELS>
    <model>{{ m }} </model>
</MODELS>


<DIAGNOSTICS>
    <diag>
        <description>         Tutorial diagnostic  </description>
        <variable_def_dir>    ./variable_defs/     </variable_def_dir>
        <variable>            {{ v }}                </variable>
        <field_type>          {{ ft }}                  </field_type>
        <diag_script_cfg_dir> ./nml/cfg_MyDiag/    </diag_script_cfg_dir>
        <tags>                R_atmos, T_atmDyn, T_phys </tags>

        <diag_script cfg="cfg_MyDiag.ncl"> MyDiag.ncl  </diag_script>
    </diag>
</DIAGNOSTICS>

<ESGF>
    <config_file>./esgf_config.xml</config_file>
</ESGF>

</namelist>
"""
t_mline = " ".join([
    '{{ project }}', '{{ name }}', '{{ product }}', '{{ institute }}',
    '{{ model }}', '{{ experiment }}', '{{ time_freq }}', '{{ realm }}',
    '{{ mip }}', '{{ ensemble }}', '{{ version }}', '{{ grid }}',
    '{{ start_year }}', '{{ end_year }}', '{{ ptid }}'
])


def get_modelline(**kwargs):
    d = dict()
    d['Amon'] = {'time_freq': 'mon', 'realm': 'atmos'}
    d['Omon'] = {'time_freq': 'mon', 'realm': 'ocean'}
    d['Lmon'] = {'time_freq': 'mon', 'realm': 'land'}

    kwargs.update({'version': 'latest', 'ptid': 'CMIP6_template'})
    if 'mip' in kwargs.keys():
        if kwargs['mip'] in d.keys():
            kwargs.update(d[kwargs['mip']])
    tt_mline = Template(t_mline)
    return tt_mline.render(**kwargs)

def get_info_from_freva(**kwargs):
    facets = []
    for key, value in kwargs.items():
        facets.append("{0}={1}".format(key,value))
    cmd = "freva --databrowser project=cmip6 {0} --all-facets".format(" ".join(facets))
    print(cmd)

def get_available_dataset_info(requirements):
    # TODO: tbi
    out = list()

    for item in requirements:
        for experiment in item['experiment']:
            for variable in item['variables']:
                if isinstance(variable, str):
                    get_info_from_freva(experiment=experiment, variable=variable)
                elif isinstance(variable, dict):
                    get_info_from_freva(experiment=experiment, variable=variable['#text'])
                else:
                    raise Exception

        out.append([
            {'model': 'MODEL1', 'institute': 'InstituteXY', 'experiment': 'experiment', 'start_year': "1850",
            'end_year':"2010", 'mip': 'TESTMIP', 'grid':'grid'},
            {'model': 'MODEL1', 'institute': 'InstituteXY', 'experiment': 'experiment', 'start_year': "1850",
            'end_year':"2010", 'mip': 'TESTMIP', 'grid':'grid'}
            ])
    return out

def get_namelist(namelist):


    _check_namelist(namelist)

    requirements_per_diagblock = get_namelist_diag_requirements(namelist)
    available_datasets_per_diagblock = get_available_dataset_info(requirements_per_diagblock)

    with open(namelist, 'r') as f:
        j = xmltodict.parse(f.read())

    if j['namelist']['MODELS'] is not None:
        j['namelist']['MODELS'] = ["{{ global_modelline }}"]

    for i in range(len(available_datasets_per_diagblock)):
        j['namelist']['DIAGNOSTICS']['diag'][i]['model'] = [
                get_modelline(**item) for item in available_datasets_per_diagblock[i]
        ]


    return xmltodict.unparse(j, pretty=True)


def _check_namelist(namelist):
    """Return True id namelist exist, else throw exception."""
    if not os.path.isfile(namelist):
        raise Exception
    return True


def _get_variable_str(variable):
    if isinstance(variable, str):
        out = variable
    elif isinstance(variable, list):
        if len(variable) != 0:
            try:
                out = ";".join(variable)
            except:
                out = ";".join([item.__repr__() for item in variable])
        else:
            out = None
    else:
        try:
            out = variable['#text']
        except:
            out = None
    return out


def _get_experiments(modellines):
    """Get Experiments used in modellines."""
    valid_experiments = set([
        'historical', 'piControl', "1pctCO2", "esmFixClim1", "esmHistorical",
        "amip"
    ])
    black_list = [
        "OBS", "obs4mips", "OBS_gridfile", "reanalysis", "observation"
    ]
    match = list()
    out = list()

    if not isinstance(modellines, list):
        modellines = [modellines]
    for modelline in modellines:
        if not isinstance(modelline, str):
            try:
                model_line_parts = modelline['#text'].split()
            except:
                print("Modelline is of type: {0}".format(type(modelline)))
                model_line_parts = []
        else:
            model_line_parts = modelline.split()

        if len(model_line_parts) == 0:
            msg = "Empty modelline"
            print(msg)

        if any([item in black_list for item in model_line_parts]):
            continue

        match += list(
            set.intersection(set(model_line_parts), valid_experiments))

        if len(match) == 0:
            msg = "Unknown experiment for modelline : {}".format(modelline)
            print(msg)
        out.append(match)
    return list(set(match))


def get_namelist_diag_requirements(namelist):
    """Return requirements of each diagblock."""

    _check_namelist(namelist)

    out = list()

    with open(namelist, 'r') as f:
        j = xmltodict.parse(f.read())

    diagblocks = j['namelist']['DIAGNOSTICS']['diag']
    if not isinstance(diagblocks, list):
        diagblocks = [diagblocks]
    cnt = 0
    for diagblock in diagblocks:
        variable = _get_variable_str(diagblock['variable'])
        if 'model' in diagblock.keys():
            experiment = _get_experiments(diagblock['model'])
        else:
            experiment = []
        time_span = None
        out.append({'variables': diagblock['variable'] if isinstance(diagblock['variable'], list) else [diagblock['variable']], 'experiment': experiment})
        #print(
        #    "DiagBlock {0} of namelist {1} needs variable: {2}, experiment {3}, time_span {4}"
        #    .format(cnt, namelist, variable, experiment, time_span))
        cnt += 1
    return out


def main():
    parser = argparse.ArgumentParser(
        description='Generate routine evaluation namelist.')
    parser.add_argument('--project', dest='project')
    parser.add_argument('--name', dest='name')
    parser.add_argument('--product', dest='product')
    parser.add_argument('--institute', dest='institute')
    parser.add_argument('--model', dest='model')
    parser.add_argument('--experiment', dest='experiment')
    parser.add_argument('--mip', dest='mip')
    parser.add_argument('--ensemble', dest='ensemble')
    parser.add_argument('--grid', dest='grid')
    parser.add_argument('--start_year', dest='start_year')
    parser.add_argument('--end_year', dest='end_year')
    parser.add_argument('--variable', dest='variable')
    parser.add_argument('--namelist', dest='namelist')

    args = parser.parse_args()

    kwa = dict(args._get_kwargs())

    namelist = kwa['namelist']
    print(get_namelist(namelist))
    #print(get_template_string(namelist))
    requirements = get_namelist_diag_requirements(namelist)
    import json
    print(json.dumps(requirements, indent=4, separators=(',', ': ')))

if __name__ == "__main__":
    main()
